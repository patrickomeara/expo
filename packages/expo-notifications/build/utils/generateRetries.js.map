{"version":3,"file":"generateRetries.js","sourceRoot":"","sources":["../../src/utils/generateRetries.ts"],"names":[],"mappings":"AAAA,MAAM,aAAa,GAAG,GAAG,CAAC,CAAC,SAAS;AACpC,MAAM,aAAa,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,YAAY;AACjD,MAAM,kBAAkB,GAAG,CAAC,CAAC;AAE7B,MAAM,CAAC,OAAO,CAAC,KAAK,SAAS,CAAC,CAAC,eAAe,CAC5C,IAAuC,EACvC,OAIC;IAED,MAAM,YAAY,GAAG,OAAO,EAAE,YAAY,IAAI,aAAa,CAAC;IAC5D,MAAM,YAAY,GAAG,OAAO,EAAE,YAAY,IAAI,aAAa,CAAC;IAC5D,MAAM,iBAAiB,GAAG,OAAO,EAAE,iBAAiB,IAAI,kBAAkB,CAAC;IAE3E,IAAI,KAAK,GAAG,YAAY,CAAC;IACzB,IAAI,SAAS,GAAG,IAAI,CAAC;IACrB,SAAS,KAAK;QACZ,SAAS,GAAG,IAAI,CAAC;IACnB,CAAC;IACD,OAAO,SAAS,EAAE;QAChB,6CAA6C;QAC7C,SAAS,GAAG,KAAK,CAAC;QAClB,MAAM,MAAM,GAAG,MAAM,MAAM,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,SAAS,EAAE;YACb,MAAM,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YAC/D,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,GAAG,iBAAiB,CAAC,CAAC;SAC3D;aAAM;YACL,OAAO,MAAM,CAAC;SACf;KACF;IACD,uCAAuC;IACvC,qBAAqB;IACrB,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["const INITIAL_DELAY = 500; // 500 ms\nconst MAXIMUM_DELAY = 2 * 60 * 1000; // 2 minutes\nconst EXPONENTIAL_FACTOR = 2;\n\nexport default async function* generateRetries<T>(\n  func: (retry: () => void) => Promise<T>,\n  options?: {\n    initialDelay?: number;\n    maximumDelay?: number;\n    exponentialFactor?: number;\n  }\n): AsyncGenerator<T | undefined, T | undefined, T | undefined> {\n  const initialDelay = options?.initialDelay ?? INITIAL_DELAY;\n  const maximumDelay = options?.maximumDelay ?? MAXIMUM_DELAY;\n  const exponentialFactor = options?.exponentialFactor ?? EXPONENTIAL_FACTOR;\n\n  let delay = initialDelay;\n  let shouldTry = true;\n  function retry() {\n    shouldTry = true;\n  }\n  while (shouldTry) {\n    // If func doesn't call retry we won't retry.\n    shouldTry = false;\n    const result = yield await func(retry);\n    if (shouldTry) {\n      yield await new Promise(resolve => setTimeout(resolve, delay));\n      delay = Math.min(maximumDelay, delay * exponentialFactor);\n    } else {\n      return result;\n    }\n  }\n  // Unreachable code, appease TypeScript\n  // Appease TypeScript\n  return undefined;\n}\n"]}