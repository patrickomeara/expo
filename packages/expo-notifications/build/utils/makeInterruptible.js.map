{"version":3,"file":"makeInterruptible.js","sourceRoot":"","sources":["../../src/utils/makeInterruptible.ts"],"names":[],"mappings":"AAAA,sEAAsE;AACtE,iFAAiF;AACjF,MAAM,CAAC,OAAO,UAAU,iBAAiB,CACvC,IAAsE;IAEtE,wDAAwD;IACxD,IAAI,WAAW,GAAkB,IAAI,CAAC;IACtC,KAAK,UAAU,QAAQ,CAAC,GAAG,IAAe;QACxC,yCAAyC;QACzC,WAAW,GAAG,IAAI,MAAM,EAAE,CAAC;QAC3B,MAAM,UAAU,GAAG,WAAW,CAAC;QAE/B,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC3B,IAAI,WAAgB,CAAC;QACrB,SAAS;YACP,mEAAmE;YACnE,sFAAsF;YACtF,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACvC,IAAI,CAAC,CAAC,IAAI,EAAE;gBACV,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,yCAAyC;aAC1D;YAED,wDAAwD;YACxD,WAAW,GAAG,MAAM,CAAC,CAAC,KAAK,CAAC;YAC5B,IAAI,UAAU,KAAK,WAAW,EAAE;gBAC9B,OAAO,CAAC,sBAAsB;aAC/B;YACD,uDAAuD;SACxD;IACH,CAAC;IACD,SAAS,wBAAwB;QAC/B,kCAAkC;QAClC,iCAAiC;QACjC,0BAA0B;QAC1B,OAAO,WAAW,IAAI,IAAI,CAAC;IAC7B,CAAC;IACD,SAAS,SAAS;QAChB,sCAAsC;QACtC,8CAA8C;QAC9C,yCAAyC;QACzC,WAAW,GAAG,IAAI,MAAM,EAAE,CAAC;IAC7B,CAAC;IACD,OAAO,CAAC,QAAQ,EAAE,wBAAwB,EAAE,SAAS,CAAC,CAAC;AACzD,CAAC","sourcesContent":["// Create an interruptable function out of provided function generator\n// See: https://dev.to/chromiumdev/cancellable-async-functions-in-javascript-5gp7\nexport default function makeInterruptible<Arguments extends any[] = any[], Result = void>(\n  func: (...args: Arguments) => AsyncGenerator<unknown, Result, unknown>\n): [(...args: Arguments) => Promise<Result | undefined>, () => boolean, () => void] {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  let globalNonce: null | Object = null;\n  async function callFunc(...args: Arguments) {\n    // eslint-disable-next-line no-new-object\n    globalNonce = new Object();\n    const localNonce = globalNonce;\n\n    const iter = func(...args);\n    let resumeValue: any;\n    for (;;) {\n      // We can use a mix of function generator and asynchronous function\n      // as per https://www.pluralsight.com/guides/using-asyncawait-with-generator-functions\n      const n = await iter.next(resumeValue);\n      if (n.done) {\n        return n.value; // final return value of passed generator\n      }\n\n      // whatever the generator yielded, _now_ run await on it\n      resumeValue = await n.value;\n      if (localNonce !== globalNonce) {\n        return; // a new call was made\n      }\n      // next loop, we give resumeValue back to the generator\n    }\n  }\n  function hasBeenCalledAtLeastOnce() {\n    // `globalNonce` starts as `null`,\n    // if it's not, it must have been\n    // modified by `callFunc`.\n    return globalNonce != null;\n  }\n  function interrupt() {\n    // By changing `globalNonce` we forbid\n    // progress for any existing `callFunc` calls.\n    // eslint-disable-next-line no-new-object\n    globalNonce = new Object();\n  }\n  return [callFunc, hasBeenCalledAtLeastOnce, interrupt];\n}\n"]}