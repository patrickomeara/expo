{"version":3,"file":"DevicePushTokenAutoRegistration.fx.js","sourceRoot":"","sources":["../src/DevicePushTokenAutoRegistration.fx.ts"],"names":[],"mappings":"AAAA,OAAO,wBAAwB,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AAEtD,OAAO,EACL,oBAAoB,EACpB,uBAAuB,EACvB,sBAAsB,GACvB,MAAM,8BAA8B,CAAC;AAWtC;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAClD,YAA0D;IAE1D,uDAAuD;IACvD,gCAAgC;IAChC,sBAAsB,EAAE,CAAC;IACzB,kEAAkE;IAClE,MAAM,wBAAwB,CAAC,4BAA4B,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;AAC9F,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,iCAAiC;IACrD,oDAAoD;IACpD,gCAAgC;IAChC,sBAAsB,EAAE,CAAC;IACzB,uDAAuD;IACvD,MAAM,wBAAwB,CAAC,4BAA4B,EAAE,CAAC,IAAI,CAAC,CAAC;AACtE,CAAC;AAED,4DAA4D;AAC5D,+BAA+B;AAC/B,oBAAoB,CAAC,KAAK,CAAC,EAAE;IAC3B,uCAAuC;IACvC,oCAAoC;IACpC,oBAAoB,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC;AAEH,wBAAwB,CAAC,4BAA4B,EAAE,EAAE,CAAC,IAAI,CAC5D,sCAAsC,CACvC,CAAC;AAEF,wCAAwC;AACxC,uCAAuC;AACvC,oCAAoC;AACpC,MAAM,CAAC,KAAK,UAAU,sCAAsC,CAC1D,oBAA+C;IAE/C,IAAI,CAAC,oBAAoB,EAAE;QACzB,2CAA2C;QAC3C,OAAO;KACR;IACD,IAAI;QACF,MAAM,gBAAgB,GAAiB,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxE,+DAA+D;QAC/D,uEAAuE;QACvE,gEAAgE;QAChE,sDAAsD;QACtD,IAAI,gBAAgB,EAAE,sBAAsB,IAAI,CAAC,uBAAuB,EAAE,EAAE;YAC1E,oBAAoB,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;SAC/D;KACF;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,IAAI,CACV,6GAA6G,EAC7G,CAAC,CACF,CAAC;KACH;AACH,CAAC","sourcesContent":["import ServerRegistrationModule from './ServerRegistrationModule';\nimport { addPushTokenListener } from './TokenEmitter';\nimport { DevicePushToken } from './Tokens.types';\nimport {\n  updatePushTokenAsync,\n  hasPushTokenBeenUpdated,\n  abortUpdatingPushToken,\n} from './utils/updatePushTokenAsync';\n\n/**\n * Encapsulates device server registration data\n */\nexport type Registration = {\n  url: string;\n  body: Record<string, any>;\n  pendingDevicePushToken?: DevicePushToken | null;\n};\n\n/**\n * Sets the last registration information so that the device push token\n * gets pushed to the given registration endpoint\n * @param registration Registration endpoint to inform of new tokens\n */\nexport async function setAutoServerRegistrationAsync(\n  registration: Omit<Registration, 'pendingDevicePushToken'>\n) {\n  // We are overwriting registration, so we shouldn't let\n  // any pending request complete.\n  abortUpdatingPushToken();\n  // Remember the registration information for future token updates.\n  await ServerRegistrationModule.setLastRegistrationInfoAsync?.(JSON.stringify(registration));\n}\n\n/**\n * Removes last Expo server registration, future device push token\n * updates won't get sent there anymore.\n */\nexport async function removeAutoServerRegistrationAsync() {\n  // We are removing registration, so we shouldn't let\n  // any pending request complete.\n  abortUpdatingPushToken();\n  // Do not consider any registration when token updates.\n  await ServerRegistrationModule.setLastRegistrationInfoAsync?.(null);\n}\n\n// A global scope (to get all the updates) device push token\n// subscription, never cleared.\naddPushTokenListener(token => {\n  // Dispatch an abortable task to update\n  // last registration with new token.\n  updatePushTokenAsync(token);\n});\n\nServerRegistrationModule.getLastRegistrationInfoAsync?.().then(\n  __handlePersistedRegistrationInfoAsync\n);\n\n// Verify if last persisted registration\n// has successfully uploaded last known\n// device push token. If not, retry.\nexport async function __handlePersistedRegistrationInfoAsync(\n  lastRegistrationInfo: string | null | undefined\n) {\n  if (!lastRegistrationInfo) {\n    // No last registration info, nothing to do\n    return;\n  }\n  try {\n    const lastRegistration: Registration = JSON.parse(lastRegistrationInfo);\n    // We only want to retry if `hasPushTokenBeenUpdated` is false.\n    // If it were true it means that another call to `updatePushTokenAsync`\n    // has already occured which could only happen from the listener\n    // which has newer information than persisted storage.\n    if (lastRegistration?.pendingDevicePushToken && !hasPushTokenBeenUpdated()) {\n      updatePushTokenAsync(lastRegistration.pendingDevicePushToken);\n    }\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Error encountered while fetching last registration information for auto token updates.',\n      e\n    );\n  }\n}\n"]}